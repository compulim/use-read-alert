name: Continuous deployment

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      - id: set-version
        name: Run npx version-from-git --no-git-tag-version
        run: |
          npx version-from-git --no-git-tag-version
          echo version=`cat package.json | jq -r '.version'` >> $GITHUB_OUTPUT
      - name: Propagate versions
        run: |
          cd packages/use-read-alert
          npm version --no-git-tag-version ${{ steps.set-version.outputs.version }}
      - run: npm clean-install
      - run: npm run build --if-present
      - name: Run npm pack
        run: |
          cd packages/use-read-alert
          npm pack
      - name: Upload tarball artifact
        uses: actions/upload-artifact@v3.1.1
        with:
          name: tarball
          path: packages/use-read-alert/*.tgz
      - name: Build Pages
        run: |
          cd packages/use-read-alert
          mv *.tgz use-read-alert-0.0.0-0.tgz
          cd ../pages
          npm install
          npm run build
      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v1
        if: ${{ matrix.node-version == '16.x' }}
        with:
          path: 'packages/pages/public/'

  publish-package:
    needs: build
    runs-on: ubuntu-latest
    environment: prerelease

    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 16
          registry-url: https://registry.npmjs.org/
      - name: Download tarball artifact
        uses: actions/download-artifact@v3.0.1
        with:
          name: tarball
      - id: read-package-json
        name: Read package.json
        run: |
          echo package-name=`tar --extract --file=\`ls ./*.tgz\` --to-stdout package/package.json | jq -r .name` >> $GITHUB_OUTPUT
          echo version=`tar --extract --file=\`ls ./*.tgz\` --to-stdout package/package.json | jq -r .version` >> $GITHUB_OUTPUT
      - if: ${{ !contains(steps.read-package-json.outputs.version, '-') }}
        name: Check version number
        run: |
          echo ::error::Cannot publish production version ${{ steps.read-package-json.outputs.version }}
          exit 1
      - run: npm publish --tag ${{ github.ref_name }} `ls *.tgz`
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Summarize job
        run: echo NPM package published to https://npmjs.com/package/${{ steps.read-package-json.outputs.package-name }}/v/${{ steps.read-package-json.outputs.version }}. >> $GITHUB_STEP_SUMMARY

  deploy-pages:
    needs: build

    permissions:
      pages: write
      id-token: write

    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    runs-on: ubuntu-latest

    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v1
